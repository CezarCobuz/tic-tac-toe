{"version":3,"sources":["logo.svg","square/square.js","grid/grid.js","game/winner.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","SquareComponent","value","onPress","key","className","onClick","translateToXO","GridComponent","dimension","useState","turn","setTurn","Array","fill","map","gridValues","setGridValues","useEffect","length","console","log","alert","checkWinner","line","lineIndex","_square","squareIndex","row","column","copy","handleChange","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"iNAAAA,EAAOC,QAAU,IAA0B,kC,oGCiB9BC,G,YAAkB,SAAC,GAAmC,IAAjCC,EAAgC,EAAhCA,MAAgC,IAAzBC,eAAyB,MAAf,aAAe,EAEhE,OACE,yBACEC,IAAKF,EACLG,UAAS,kBAAuB,OAAVH,EAAiB,GAAK,kBAC5CI,QAAmB,OAAVJ,EAAiB,kBAAMC,KAAY,cAE3CD,GAAS,+BApBM,SAACA,GASrB,OANc,IAAVA,EACgB,IAEA,IAcDK,CAAcL,OClBtBM,EAAgB,SAAC,GAAuB,IAAD,IAApBC,iBAAoB,MAAR,EAAQ,IAC1BC,mBAAS,GADiB,mBAC3CC,EAD2C,KACrCC,EADqC,OAEdF,mBAClC,IAAIG,MAAMJ,GAAWK,KAAK,MAAMC,KAAI,kBAAM,IAAIF,MAAMJ,GAAWK,KAAK,UAHpB,mBAE3CE,EAF2C,KAE/BC,EAF+B,KAKlDC,qBAAU,WACJP,EAAyB,GAAjBF,EAAY,ICbD,SAACO,GAC1B,IAAMP,EAAYO,EAAWG,OAE7BC,QAAQC,IAAI,gBAAiBZ,GAC7BW,QAAQC,IAAI,6BAA8BL,GAC1CI,QAAQC,IAAI,YACZC,MAAM,UDQFC,CAAYP,KAEb,CAACL,IAkBJ,OACE,yBAAKN,UAAU,iBACZW,EAAWD,KAAI,SAACS,EAAMC,GAAP,OACd,yBAAKrB,IAAKqB,EAAWpB,UAAU,gBAC5BmB,EAAKT,KAAI,SAACW,EAASC,GAAV,OACR,kBAAC,EAAD,CACEvB,IAAKqB,EAAY,GAAKE,EACtBxB,QAAS,kBAvBA,SAACyB,EAAKC,GACzB,IAAI3B,EAGFA,EAFES,EAAO,IAAM,EAEP,GAGC,EAEX,IAAImB,EAAI,YAAOd,GACfc,EAAKF,GAAKC,GAAU3B,EACpBe,EAAca,GAEdlB,EAAQD,EAAO,GAUUoB,CAAaN,EAAWE,IACvCzB,MAAOc,EAAWS,GAAWE,c,ME3B5BK,MARf,WACE,OACE,yBAAK3B,UAAU,OACb,kBAAC,EAAD,QCEc4B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL9B,QAAQ8B,MAAMA,EAAMC,c","file":"static/js/main.0d787698.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.ee7cd8ed.svg\";","import \"./square.css\"\r\n\r\nimport React, { useState } from \"react\"\r\n\r\n// TODO: Source of an image maybe or an animation\r\nconst translateToXO = (value) => {\r\n  let translatedValue\r\n\r\n  if (value === 1) {\r\n    translatedValue = 'X'\r\n  } else {\r\n    translatedValue = 'O'\r\n  }\r\n\r\n  return translatedValue\r\n}\r\n\r\nexport const SquareComponent = ({ value, onPress = () => {} }) => {\r\n\r\n  return (\r\n    <div\r\n      key={value}\r\n      className={`wrapper ${value !== null ? '' : 'wrapperHovered'}`}\r\n      onClick={value === null ? () => onPress() : () => {}}\r\n    >\r\n      {value && <p> {translateToXO(value)}</p>}\r\n    </div>\r\n  )\r\n}\r\n","import \"./grid.css\"\r\n\r\nimport React, { useEffect, useState } from \"react\"\r\n\r\nimport { checkWinner } from \"../game/winner\"\r\nimport { SquareComponent } from \"../square/square\"\r\n\r\nexport const GridComponent = ({ dimension = 3 }) => {\r\n  const [turn, setTurn] = useState(0)\r\n  const [gridValues, setGridValues] = useState(\r\n    new Array(dimension).fill(null).map(() => new Array(dimension).fill(null))\r\n  )\r\n  useEffect(() => {\r\n    if (turn > (dimension - 1) * 2) {\r\n      checkWinner(gridValues)\r\n    }\r\n  }, [turn])\r\n\r\n  const handleChange = (row, column) => {\r\n    let value\r\n    if (turn % 2 === 0) {\r\n      // Player X\r\n      value = 1\r\n    } else {\r\n      // Player O\r\n      value = -1\r\n    }\r\n    let copy = [...gridValues]\r\n    copy[row][column] = value\r\n    setGridValues(copy)\r\n\r\n    setTurn(turn + 1)\r\n  }\r\n\r\n  return (\r\n    <div className=\"gameContainer\">\r\n      {gridValues.map((line, lineIndex) => (\r\n        <div key={lineIndex} className=\"rowContainer\">\r\n          {line.map((_square, squareIndex) => (\r\n            <SquareComponent\r\n              key={lineIndex + \"\" + squareIndex}\r\n              onPress={() => handleChange(lineIndex, squareIndex)}\r\n              value={gridValues[lineIndex][squareIndex]}\r\n            />\r\n          ))}\r\n        </div>\r\n      ))}\r\n    </div>\r\n  )\r\n}\r\n","export const checkWinner = (gridValues) => {\r\n  const dimension = gridValues.length\r\n\r\n  console.log('+++ dimension', dimension)\r\n  console.log(\"+++ checkWinner gridValues\", gridValues)\r\n  console.log(\"Player 1\")\r\n  alert(\"X wins\")\r\n}\r\n","import \"./App.css\"\r\n\r\nimport React from \"react\"\r\n\r\nimport { GridComponent } from \"./grid/grid\"\r\nimport logo from \"./logo.svg\"\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <GridComponent />\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default App\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}