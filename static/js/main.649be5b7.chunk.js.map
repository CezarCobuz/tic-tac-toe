{"version":3,"sources":["game/rules.js","square/square.js","grid/grid.js","App.js","serviceWorker.js","index.js"],"names":["handleChange","x","y","turn","setTurn","gridValues","setGridValues","value","dimension","length","copyGridValues","console","log","sumHorizontal","sumVertical","parser","sumMainDiagonal","sumSecondaryDiagonal","alert","checkWinner","SquareComponent","onPress","key","className","onClick","translateToXO","GridComponent","useState","Array","fill","map","line","lineIndex","_square","squareIndex","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"6SAsDaA,EAAe,SAC1BC,EACAC,EACAC,EACAC,EACAC,EACAC,GAEA,IAEIC,EAFEC,EAAYH,EAAWI,OAK3BF,EAFEJ,EAAO,IAAM,EAEP,GAGC,EAEX,IAAIO,EAAc,YAAOL,GACzBK,EAAeT,GAAGC,GAAKK,EAEvBD,EAAcI,GACdN,EAAQD,EAAO,GA3EG,SAACE,EAAYF,EAAMF,EAAGC,EAAGM,GAC3CG,QAAQC,IAAI,iBAAkBP,GAC9BM,QAAQC,IAAI,WAAYT,GACxBQ,QAAQC,IAAI,QAASX,GACrBU,QAAQC,IAAI,QAASV,GACrBS,QAAQC,IAAI,gBAAiBJ,GAM7B,IAJA,IAAIK,EAAgB,EAChBC,EAAc,EAGTC,EAAS,EAAGA,EAASP,EAAWO,IACvCF,GAAiBR,EAAWJ,GAAGc,GAC/BD,GAAeT,EAAWU,GAAQb,GAIpC,IAAIc,EAAkB,EACtB,GAAIf,IAAMC,EACR,IAAK,IAAIa,EAAS,EAAGA,EAASP,EAAWO,IACvCC,GAAmBX,EAAWU,GAAQA,GAK1C,IAAIE,EAAuB,EAC3B,GAAIhB,EAAIC,IAAMM,EAAY,EACxB,IAAK,IAAIO,EAAS,EAAGA,EAASP,EAAWO,IACvCE,GAAwBZ,EAAWU,GAAQP,EAAY,EAAIO,GAI3DF,IAAkBL,GAAaM,IAAgBN,GACjDU,MAAM,SAEJL,KAAmB,EAAIL,GAAaM,KAAiB,EAAIN,GAC3DU,MAAM,SAGJF,IAAoBR,GAAaS,IAAyBT,GAC5DU,MAAM,SAGNF,KAAqB,EAAIR,GACzBS,KAA0B,EAAIT,GAE9BU,MAAM,SAGRP,QAAQC,IAAI,2BAA4BK,GACxCN,QAAQC,IAAI,sBAAuBI,GA6BjCG,CAAYd,EAAYF,EAAMF,EAAGC,EAAGM,IC/D3BY,G,MAAkB,SAAC,GAAmC,IAAjCb,EAAgC,EAAhCA,MAAgC,IAAzBc,eAAyB,MAAf,aAAe,EAChE,OACE,yBACEC,IAAKf,EACLgB,UAAS,kBAAuB,IAAVhB,EAAc,GAAK,kBACzCiB,QAAmB,IAAVjB,EAAc,kBAAMc,KAAY,cAE9B,IAAVd,GAAe,+BAnBA,SAACA,GASrB,OANc,IAAVA,EACgB,IAEA,IAaKkB,CAAclB,OCjB5BmB,EAAgB,SAAC,GAAuB,IAAD,IAApBlB,iBAAoB,MAAR,EAAQ,IAC1BmB,mBAAS,GADiB,mBAC3CxB,EAD2C,KACrCC,EADqC,OAEduB,mBAClC,IAAIC,MAAMpB,GAAWqB,KAAK,GAAGC,KAAI,kBAAM,IAAIF,MAAMpB,GAAWqB,KAAK,OAHjB,mBAE3CxB,EAF2C,KAE/BC,EAF+B,KAMlD,OACE,yBAAKiB,UAAU,iBACZlB,EAAWyB,KAAI,SAACC,EAAMC,GAAP,OACd,yBAAKV,IAAKU,EAAWT,UAAU,gBAC5BQ,EAAKD,KAAI,SAACG,EAASC,GAAV,OACR,kBAAC,EAAD,CACEZ,IAAKU,EAAY,GAAKE,EACtBb,QAAS,kBACPrB,EACEgC,EACAE,EACA/B,EACAC,EACAC,EACAC,IAGJC,MAAOF,EAAW2B,GAAWE,cChB5BC,MARf,WACE,OACE,yBAAKZ,UAAU,OACb,kBAAC,EAAD,QCGca,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL1C,QAAQ0C,MAAMA,EAAMC,c","file":"static/js/main.649be5b7.chunk.js","sourcesContent":["/** x, y last position filled */\nconst checkWinner = (gridValues, turn, x, y, dimension) => {\n  console.log(\"+++ gridValues\", gridValues)\n  console.log(\"+++ turn\", turn)\n  console.log(\"+++ x\", x)\n  console.log(\"+++ y\", y)\n  console.log(\"+++ dimension\", dimension)\n\n  let sumHorizontal = 0\n  let sumVertical = 0\n\n  // TODO: use [1, 2, 3, 4].reduce((a, b) => a + b, 0)\n  for (let parser = 0; parser < dimension; parser++) {\n    sumHorizontal += gridValues[x][parser]\n    sumVertical += gridValues[parser][y]\n  }\n\n  /** Main diagonal */\n  let sumMainDiagonal = 0\n  if (x === y) {\n    for (let parser = 0; parser < dimension; parser++) {\n      sumMainDiagonal += gridValues[parser][parser]\n    }\n  }\n\n  /** Secondary diagonal */\n  let sumSecondaryDiagonal = 0\n  if (x + y === dimension - 1) {\n    for (let parser = 0; parser < dimension; parser++) {\n      sumSecondaryDiagonal += gridValues[parser][dimension - 1 - parser]\n    }\n  }\n\n  if (sumHorizontal === dimension || sumVertical === dimension) {\n    alert(\"X WON\")\n  }\n  if (sumHorizontal === -1 * dimension || sumVertical === -1 * dimension) {\n    alert(\"O WON\")\n  }\n\n  if (sumMainDiagonal === dimension || sumSecondaryDiagonal === dimension) {\n    alert(\"X WON\")\n  }\n  if (\n    sumMainDiagonal === -1 * dimension ||\n    sumSecondaryDiagonal === -1 * dimension\n  ) {\n    alert(\"O WON\")\n  }\n\n  console.log(\"+++ sumSecondaryDiagonal\", sumSecondaryDiagonal)\n  console.log(\"+++ sumMainDiagonal\", sumMainDiagonal)\n}\n\nexport const handleChange = (\n  x,\n  y,\n  turn,\n  setTurn,\n  gridValues,\n  setGridValues\n) => {\n  const dimension = gridValues.length\n\n  let value\n  if (turn % 2 === 0) {\n    // Player X\n    value = 1\n  } else {\n    // Player O\n    value = -1\n  }\n  let copyGridValues = [...gridValues]\n  copyGridValues[x][y] = value\n\n  setGridValues(copyGridValues)\n  setTurn(turn + 1)\n\n  // TODO: remove true ||\n  if (true || turn > (dimension - 1) * 2) {\n    checkWinner(gridValues, turn, x, y, dimension)\n  }\n}\n","import \"./square.css\"\n\nimport React, { useState } from \"react\"\n\n// TODO: Source of an image maybe or an animation\nconst translateToXO = (value) => {\n  let translatedValue\n\n  if (value === 1) {\n    translatedValue = \"X\"\n  } else {\n    translatedValue = \"O\"\n  }\n\n  return translatedValue\n}\n\nexport const SquareComponent = ({ value, onPress = () => {} }) => {\n  return (\n    <div\n      key={value}\n      className={`wrapper ${value !== 0 ? \"\" : \"wrapperHovered\"}`}\n      onClick={value === 0 ? () => onPress() : () => {}}\n    >\n      {value !== 0 && <p> {translateToXO(value)}</p>}\n    </div>\n  )\n}\n","import \"./grid.css\"\n\nimport React, { useState } from \"react\"\n\nimport { handleChange } from \"../game/rules\"\nimport { SquareComponent } from \"../square/square\"\n\nexport const GridComponent = ({ dimension = 3 }) => {\n  const [turn, setTurn] = useState(0)\n  const [gridValues, setGridValues] = useState(\n    new Array(dimension).fill(0).map(() => new Array(dimension).fill(0))\n  )\n\n  return (\n    <div className=\"gameContainer\">\n      {gridValues.map((line, lineIndex) => (\n        <div key={lineIndex} className=\"rowContainer\">\n          {line.map((_square, squareIndex) => (\n            <SquareComponent\n              key={lineIndex + \"\" + squareIndex}\n              onPress={() =>\n                handleChange(\n                  lineIndex,\n                  squareIndex,\n                  turn,\n                  setTurn,\n                  gridValues,\n                  setGridValues\n                )\n              }\n              value={gridValues[lineIndex][squareIndex]}\n            />\n          ))}\n        </div>\n      ))}\n    </div>\n  )\n}\n","import \"./App.css\"\n\nimport React from \"react\"\n\nimport { GridComponent } from \"./grid/grid\"\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <GridComponent />\n    </div>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}