{"version":3,"sources":["utils/dimensions.js","cell/cell.js","game/winner/classic.js","game/winner/order-and-chaos.js","variations/order-and-chaos/symbol-selector.item.js","variations/order-and-chaos/symbol-selector.js","grid/grid.js","game/rules.js","App.js","serviceWorker.js","index.js"],"names":["getWindowDimensions","window","width","innerWidth","height","innerHeight","CellComponent","value","onPress","valueColor","useState","windowDimensions","setWindowDimensions","useEffect","handleResize","addEventListener","removeEventListener","useWindowDimensions","key","className","onClick","valueFromXO","symbol","checkWinnerClassic","gridValues","turn","x","y","dimension","setWinner","sumHorizontal","sumVertical","parser","sumMainDiagonal","sumSecondaryDiagonal","checkWinnerOrderAndChaos","counterSameSymbol","console","log","index","parserX","parserY","SymbolSelectorItem","isSelected","SymbolSelector","player","selectedValue","setSelectedValue","GridComponent","gameMode","setTurn","winner","Array","fill","map","setGridValues","selectedSymbol","setSelectedSymbol","color","line","lineIndex","_square","columnIndex","length","copyGridValues","handleChange","App","setGameMode","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.4468c55f.chunk.js","sourcesContent":["import { useEffect, useState } from 'react';\n\nconst getWindowDimensions = () => {\n    const { innerWidth: width, innerHeight: height } = window;\n    return {\n        width,\n        height\n    };\n}\n\nexport const useWindowDimensions = () => {\n    const [windowDimensions, setWindowDimensions] = useState(getWindowDimensions());\n\n    useEffect(() => {\n        function handleResize() {\n            setWindowDimensions(getWindowDimensions());\n        }\n\n        window.addEventListener('resize', handleResize);\n        return () => window.removeEventListener('resize', handleResize);\n    }, []);\n\n    return windowDimensions;\n}","import \"./cell.css\"\n\nimport React from \"react\"\n\nimport { useWindowDimensions } from \"../utils/dimensions\"\n\nexport const CellComponent = ({\n  value,\n  onPress = () => {},\n  valueColor = \"default\",\n}) => {\n  const { height, width } = useWindowDimensions()\n\n  // TODO: Apply responsive window on parent and all flex: 1 here\n  return (\n    <div\n      key={value}\n      className={`wrapper ${height < width ? \"wrapperByHeight\" : null} ${\n        value !== 0 ? null : \"wrapperHovered\"\n      }`}\n      onClick={value === 0 ? () => onPress() : () => {}}\n    >\n      {value !== 0 && (\n        <p className={`symbol ${valueColor === 'contrast'? \"symbolContrast\" : \"\"}`}>\n          {value}\n        </p>\n      )}\n    </div>\n  )\n}\n","const valueFromXO = (symbol) => {\n  let value\n\n  switch (symbol) {\n    case \"X\":\n      value = 1\n      break\n    case \"O\":\n      value = -1\n      break\n\n    default:\n      value = 0\n      break\n  }\n\n  return value\n}\n\n/** x, y last position filled */\nexport const checkWinnerClassic = (\n  gridValues,\n  turn,\n  x,\n  y,\n  dimension,\n  setWinner\n) => {\n  let sumHorizontal = 0\n  let sumVertical = 0\n\n  // TODO: use [1, -1, 0, ... ].reduce((a, b) => a + b, 0)\n  // sumHorizontal = gridValues[x].reduce((a, b) => a + b, 0)\n  // sumVertical =\n\n  for (let parser = 0; parser < dimension; parser++) {\n    sumHorizontal += valueFromXO(gridValues[x][parser].value)\n    sumVertical += valueFromXO(gridValues[parser][y].value)\n  }\n\n  /** Main diagonal */\n  let sumMainDiagonal = 0\n  if (x === y) {\n    for (let parser = 0; parser < dimension; parser++) {\n      sumMainDiagonal += valueFromXO(gridValues[parser][parser].value)\n    }\n  }\n\n  /** Secondary diagonal */\n  let sumSecondaryDiagonal = 0\n  if (x + y === dimension - 1) {\n    for (let parser = 0; parser < dimension; parser++) {\n      sumSecondaryDiagonal += valueFromXO(\n        gridValues[parser][dimension - 1 - parser].value\n      )\n    }\n  }\n\n  if (sumHorizontal === dimension || sumVertical === dimension) {\n    setWinner(\"X\")\n  }\n  if (sumHorizontal === -1 * dimension || sumVertical === -1 * dimension) {\n    setWinner(\"O\")\n  }\n\n  if (sumMainDiagonal === dimension || sumSecondaryDiagonal === dimension) {\n    setWinner(\"X\")\n  }\n  if (\n    sumMainDiagonal === -1 * dimension ||\n    sumSecondaryDiagonal === -1 * dimension\n  ) {\n    setWinner(\"O\")\n  }\n}\n","export const checkWinnerOrderAndChaos = (\n  gridValues,\n  turn,\n  x,\n  y,\n  dimension,\n  setWinner\n) => {\n  console.log(\"+++ gridValues\", gridValues)\n  let counterSameSymbol\n  // setWinner('Chaos')\n\n  // TODO: Generalize bellow for(s) into a generic function that takes start, stop?\n\n  // Vertical\n  counterSameSymbol = 1\n  for (let index = 0; index < dimension - 1; index++) {\n    if (\n      gridValues[x][index].value !== 0 &&\n      gridValues[x][index].value === gridValues[x][index + 1].value\n    ) {\n      counterSameSymbol++\n    }\n  }\n\n  if (counterSameSymbol === 5) {\n    setWinner(\"Order\")\n  }\n\n  // Horizontal\n  counterSameSymbol = 1\n  for (let index = 0; index < dimension - 1; index++) {\n    if (\n      gridValues[index][y].value !== 0 &&\n      gridValues[index][y].value === gridValues[index + 1][y].value\n    ) {\n      counterSameSymbol++\n    }\n  }\n\n  if (counterSameSymbol === 5) {\n    setWinner(\"Order\")\n  }\n\n  // ==========================================\n  // Diagonals - main: top left to bottom right\n  // ==========================================\n  const startingDiagonals = [\n    {\n      x: 0,\n      y: 0,\n      // TODO: also stop needed\n    },\n    {\n      x: 0,\n      y: 1,\n    },\n    {\n      x: 1,\n      y: 0,\n    },\n  ]\n\n  counterSameSymbol = 1\n  for (let index = 0; index < dimension - 1; index++) {\n    if (\n      gridValues[index][index].value !== 0 &&\n      gridValues[index][index].value === gridValues[index + 1][index + 1].value\n    ) {\n      counterSameSymbol++\n    }\n  }\n\n  if (counterSameSymbol === 5) {\n    setWinner(\"Order\")\n  }\n\n  // For a 6x6 grid:\n  // 0, 1 start, stop: 4,5\n  counterSameSymbol = 1\n  for (\n    let parserX = 0, parserY = 1;\n    parserX < dimension - 2 && parserY < dimension - 1;\n    parserX++, parserY++\n  ) {\n    if (\n      gridValues[parserX][parserY].value !== 0 &&\n      gridValues[parserX][parserY].value ===\n        gridValues[parserX + 1][parserY + 1].value\n    ) {\n      counterSameSymbol++\n    }\n  }\n\n  if (counterSameSymbol === 5) {\n    setWinner(\"Order\")\n  }\n\n  // 1, 0 start, stop: 5,4\n  counterSameSymbol = 1\n  for (\n    let parserX = 1, parserY = 0;\n    parserX < dimension - 1 && parserY < dimension - 2;\n    parserX++, parserY++\n  ) {\n    if (\n      gridValues[parserX][parserY].value !== 0 &&\n      gridValues[parserX][parserY].value ===\n        gridValues[parserX + 1][parserY + 1].value\n    ) {\n      counterSameSymbol++\n    }\n  }\n\n  if (counterSameSymbol === 5) {\n    setWinner(\"Order\")\n  }\n\n  // ==========================================\n  // Diagonals - anti: top right to bottom left\n  // ==========================================\n\n  // For a 6x6 grid:\n  // 0, 5 start, stop: 5,0\n  counterSameSymbol = 1\n  for (\n    let parserX = 0, parserY = dimension - 1;\n    parserX < dimension - 2 && parserY > 1; // start + 1 where start = 0\n    parserX++, parserY--\n  ) {\n    if (\n      gridValues[parserX][parserY].value !== 0 &&\n      gridValues[parserX][parserY].value ===\n        gridValues[parserX + 1][parserY - 1].value // next\n    ) {\n      counterSameSymbol++\n    }\n  }\n\n  if (counterSameSymbol === 5) {\n    setWinner(\"Order\")\n  }\n\n  // 0, 4 start, stop: 4,0\n  counterSameSymbol = 1\n  for (\n    let parserX = 0, parserY = dimension - 2;\n    parserX < 4 && parserY > 0;\n    parserX++, parserY--\n  ) {\n    if (\n      gridValues[parserX][parserY].value !== 0 &&\n      gridValues[parserX][parserY].value ===\n        gridValues[parserX + 1][parserY - 1].value\n    ) {\n      counterSameSymbol++\n    }\n  }\n\n  if (counterSameSymbol === 5) {\n    setWinner(\"Order\")\n  }\n\n  // 1, 5 start, stop: 5,1\n  counterSameSymbol = 1\n  for (\n    let parserX = 1, parserY = 5;\n    parserX < 5 && parserY > 1;\n    parserX++, parserY--\n  ) {\n    if (\n      gridValues[parserX][parserY].value !== 0 &&\n      gridValues[parserX][parserY].value ===\n        gridValues[parserX + 1][parserY - 1].value \n    ) {\n      counterSameSymbol++\n    }\n  }\n\n  if (counterSameSymbol === 5) {\n    setWinner(\"Order\")\n  }\n}\n","import \"./symbol-selector.item.css\"\n\nimport React from \"react\"\n\nexport const SymbolSelectorItem = ({\n  value,\n  isSelected = false,\n  onPress = () => {},\n}) => {\n  // TODO: variables color -> red for chaos, green for order?\n  return (\n    <div\n      className={`selectorItemWrapper ${\n        isSelected ? \"selectedSelectorItem\" : null\n      }`}\n      onClick={() => onPress()}\n    >\n      <p\n        className={`symbolSelectorItemText ${\n          isSelected ? 'selectedSelectorItemText' : null\n        }`}\n      >\n        {value}\n      </p>\n    </div>\n  )\n}\n","import \"./symbol-selector.css\"\n\nimport React, { useState } from \"react\"\n\nimport { SymbolSelectorItem } from \"./symbol-selector.item\"\n\nexport const SymbolSelector = ({ player, selectedValue, setSelectedValue }) => {\n  return (\n    <div className={\"symbolSelectorWrapper\"}>\n      <p\n        className={`selectorTurnMessage ${\n          player === \"Chaos\" ? \"selectorTurnMessageContrast\" : null\n        }`}\n      >\n        {player} turn\n      </p>\n      <div className=\"selectorItems\">\n        <SymbolSelectorItem\n          value=\"X\"\n          isSelected={\"X\" === selectedValue}\n          onPress={() => setSelectedValue(\"X\")}\n        />\n        <SymbolSelectorItem\n          value=\"O\"\n          isSelected={\"O\" === selectedValue}\n          onPress={() => setSelectedValue(\"O\")}\n        />\n      </div>\n    </div>\n  )\n}\n","import \"./grid.css\"\n\nimport React, { useEffect, useState } from \"react\"\n\nimport { CellComponent } from \"../cell/cell\"\nimport { handleChange } from \"../game/rules\"\nimport { SymbolSelector } from \"../variations/order-and-chaos/symbol-selector\"\n\nexport const GridComponent = ({ gameMode = \"Classic\" }) => {\n  const dimension = gameMode === \"Order & Chaos\" ? 6 : 3\n\n  const [turn, setTurn] = useState(0)\n  const [winner, setWinner] = useState(null)\n  const [gridValues, setGridValues] = useState(\n    new Array(dimension).fill(0).map(() => new Array(dimension).fill(0))\n  )\n\n  /** For Order and Chaos */\n  const [selectedSymbol, setSelectedSymbol] = useState(\"X\")\n\n  useEffect(() => {\n    // Resetters\n    setGridValues(\n      new Array(dimension)\n        .fill({ value: 0, color: \"default\" })\n        .map(() => new Array(dimension).fill({ value: 0, color: \"default\" }))\n    )\n    setTurn(0)\n    setWinner(null)\n    // TODO: Game mode rather than dimension, as dimension can be the same but game mode change\n  }, [dimension])\n\n  return (\n    <div>\n      {winner && (\n        <div className=\"winnerMessageContainer\">\n          <p className=\"winnerMessage\">{winner} wins!</p>\n        </div>\n      )}\n      <div className=\"gameContainer\">\n        {gridValues.map((line, lineIndex) => (\n          <div key={lineIndex} className=\"rowContainer\">\n            {line.map((_square, columnIndex) => (\n              <CellComponent\n                key={lineIndex + \"\" + columnIndex}\n                valueColor={gridValues[lineIndex][columnIndex].color}\n                onPress={() =>\n                  handleChange(\n                    gameMode,\n                    lineIndex,\n                    columnIndex,\n                    turn,\n                    setTurn,\n                    gridValues,\n                    setGridValues,\n                    setWinner,\n                    selectedSymbol\n                  )\n                }\n                value={gridValues[lineIndex][columnIndex].value}\n              />\n            ))}\n          </div>\n        ))}\n      </div>\n      {/* Game mode: Order & Chaos */}\n      {gameMode === \"Order & Chaos\" && (\n        <SymbolSelector\n          player={turn % 2 === 0 ? \"Order\" : \"Chaos\"}\n          selectedValue={selectedSymbol}\n          setSelectedValue={setSelectedSymbol}\n        />\n      )}\n    </div>\n  )\n}\n","import { checkWinnerClassic } from \"./winner/classic\"\nimport { checkWinnerOrderAndChaos } from \"./winner/order-and-chaos\"\n\n/** TODO: ADD @param Game mode */\nexport const handleChange = (\n  gameMode,\n  x,\n  y,\n  turn,\n  setTurn,\n  gridValues,\n  setGridValues,\n  setWinner,\n  selectedSymbol = null\n) => {\n  const dimension = gridValues.length\n\n  let value\n\n  // This does not apply for Order & Chaos -> recycle only for changing the color\n  // TODO: Refactor bellow condition + values so it applies to Order & Chaos (just put the X / O value) and check consecutive\n\n  if (gameMode === \"Classic\") {\n    if (turn % 2 === 0) {\n      // Player X\n      value = \"X\"\n    } else {\n      // Player O\n      value = \"O\"\n    }\n  }\n\n  if (gameMode === \"Order & Chaos\") {\n    value = selectedSymbol\n  }\n\n  let copyGridValues = [...gridValues]\n  copyGridValues[x][y] = {\n    value: value,\n    color: turn % 2 === 0 ? \"default\" : \"contrast\",\n  }\n\n  setGridValues(copyGridValues)\n  setTurn(turn + 1)\n\n  if (gameMode === \"Classic\") {\n    checkWinnerClassic(gridValues, turn, x, y, dimension, setWinner)\n  }\n\n  if (gameMode === \"Order & Chaos\") {\n    checkWinnerOrderAndChaos(gridValues, turn, x, y, dimension, setWinner)\n  }\n}\n","import \"./App.css\"\n\nimport React, { useState } from \"react\"\n\nimport { GridComponent } from \"./grid/grid\"\n\nconst switchGameMode = (currentGameMode, setter) => {\n  if (currentGameMode === \"Classic\") {\n    setter(\"Order & Chaos\")\n  } else {\n    setter(\"Classic\")\n  }\n}\n\nconst App = () => {\n  const [gameMode, setGameMode] = useState(\"Order & Chaos\")\n\n  return (\n    <div className=\"App\">\n      <GridComponent gameMode={gameMode} />\n\n      <button onClick={() => switchGameMode(gameMode, setGameMode)}>\n        {gameMode === \"Classic\"\n          ? \"Switch to Order & Chaos\"\n          : \"Switch to Classic\"}\n      </button>\n    </div>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}